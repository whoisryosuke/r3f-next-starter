/**
 * Auto-generated by: https://github.com/pmndrs/gltfjsx
 *
 * @format
 */

import * as THREE from "three"
import React, { useRef } from "react"
import {
	useGLTF,
	PerspectiveCamera,
	useAnimations,
	useHelper,
	RandomizedLight,
	AccumulativeShadows,
	SoftShadows,
} from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { useFrame } from "react-three-fiber"
import { easing } from "maath"
import { PointLightHelper } from "three"
import { useControls } from "leva"

type GLTFResult = GLTF & {
	nodes: {
		Bottle: THREE.Mesh
		Head: THREE.Mesh
		Liquid: THREE.Mesh
		SprayPipe: THREE.Mesh
		Body: THREE.Mesh
		Eyes: THREE.Mesh
		Hair: THREE.Mesh
	}
	materials: {
		["Glass.002"]: THREE.MeshPhysicalMaterial
		Head: THREE.MeshStandardMaterial
		Liquid: THREE.MeshPhysicalMaterial
		FrontColor: THREE.MeshStandardMaterial
		mainMaterial: THREE.MeshStandardMaterial
	}
}

type ActionName = "EmptyAction"
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Admi({
	...props
}: JSX.IntrinsicElements["group"]) {
	const group = useRef<THREE.Group>()
	// @ts-ignore
	const { nodes, materials, animations } = useGLTF(
		"/scene.glb"
	) as GLTFResult
	// @ts-ignore
	const { actions } = useAnimations<GLTFActions>(
		animations,
		group
	)

	const light = useRef(null)
	const eyes = useRef(null)

	const lightConfig = useControls("light", {
		intensity: 0.25,
		x: { value: 0, min: -100, max: 100, step: 1 },
		y: { value: 0, min: -100, max: 100, step: 1 },
		z: { value: 0, min: -100, max: 100, step: 1 },
	})

	const { enabled, ...config } = useControls({
		enabled: true,
		frustum: { value: 3.75, min: 1.5, max: 4.5 },
		size: {
			value: 0.005,
			min: 0.001,
			max: 0.01,
			step: 0.001,
		},
		near: { value: 9.5, min: 1.5, max: 9.5 },
		samples: { value: 10, min: 1, max: 20, step: 1 },
		rings: { value: 11, min: 1, max: 20, step: 1 },
	})

	const easeOutQuint = (x: number): number => {
		if (x < 0) {
			return Math.pow(1 + x, 10) - 1
		}
		return 1 - Math.pow(1 - x, 10)
	}

	function easeInOutQuint(x: number): number {
		return x < 0.5
			? 16 * x * x * x * x * x
			: 1 - Math.pow(-2 * x + 2, 5) / 2
	}
	useFrame((state, delta) => {
		const x = state.pointer.x
		const y = state.pointer.y
		// @ts-ignore
		// easing.dampE(
		// 	light.current.position,
		// 	[state.pointer.x * 100, -state.pointer.y * 100, 100],
		// 	0.2,
		// 	delta
		// )
		light.current?.position.set(x * 100, y * 100, 50)
	})

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
		>
			<SoftShadows {...config} />

			<group name="Scene">
				<group
					name="Camera"
					position={[2.96, 4.66, 7.18]}
					rotation={[1.73, -0.11, -0.53]}
				>
					<PerspectiveCamera
						name="Camera_Orientation"
						makeDefault={true}
						far={1000}
						near={0.1}
						fov={22.9}
						rotation={[-Math.PI / 2, 0, 0]}
					/>
				</group>
				<pointLight
					ref={light}
					castShadow={true}
					decay={10}
					intensity={0.25}
					// position={[
					// 	// lightConfig.x,
					// 	// lightConfig.y,
					// 	// lightConfig.z,
					// 	0, 0, 100,
					// ]}
				/>
				<ambientLight intensity={0.05} />
				<group
					name="Controller"
					rotation={[0, Math.PI / 2 - 1.4, 0]}
				>
					<group name="Scene_1">
						<group name="perfController">
							<mesh
								name="Bottle"
								castShadow
								receiveShadow
								geometry={nodes.Bottle.geometry}
								material={materials["Glass.002"]}
							/>
							<mesh
								name="Head"
								castShadow
								receiveShadow
								geometry={nodes.Head.geometry}
								material={materials.Head}
							/>
							<mesh
								name="Liquid"
								castShadow
								receiveShadow
								geometry={nodes.Liquid.geometry}
								material={materials.Liquid}
							/>
							<mesh
								name="SprayPipe"
								castShadow
								receiveShadow
								geometry={nodes.SprayPipe.geometry}
								material={materials.FrontColor}
							/>
						</group>
					</group>
					<mesh
						name="Body"
						castShadow
						receiveShadow
						geometry={nodes.Body.geometry}
						// material={materials.mainMaterial}
					>
						<meshStandardMaterial color={"white"} />
					</mesh>
					<mesh
						receiveShadow
						geometry={nodes.Body.geometry}
						// material={materials.mainMaterial}
					>
						<meshStandardMaterial />
					</mesh>
					<mesh
						ref={eyes}
						name="Eyes"
						castShadow
						receiveShadow
						geometry={nodes.Eyes.geometry}
						// material={nodes.Eyes.material}
					>
						{" "}
						<meshStandardMaterial color={"white"} />
					</mesh>
					<mesh
						name="Hair"
						castShadow
						receiveShadow
						geometry={nodes.Hair.geometry}
						// material={nodes.Hair.material}
					>
						{" "}
						<meshStandardMaterial color={"white"} />
					</mesh>
				</group>
			</group>
		</group>
	)
}

useGLTF.preload("/scene.glb")
